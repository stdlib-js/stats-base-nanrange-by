{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array via a callback function, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} range\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ] );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = nanrangeBy( x.length, arraylike2object( x ), 1, 0, accessor );\n* // returns 18.0\n*/\nfunction nanrangeBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar xbuf;\n\tvar get;\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[0];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = clbk.call( thisArg, get( xbuf, offsetX ), 0, offsetX, xbuf );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmin = clbk.call( thisArg, get( xbuf, ix ), i, ix, xbuf );\n\t\tif ( min === min && min !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, ix, xbuf );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanrangeBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array via a callback function, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} range\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = nanrangeBy( x.length, x, 1, 0, accessor );\n* // returns 18.0\n*/\nfunction nanrangeBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX, clbk, thisArg );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = clbk.call( thisArg, x[ offsetX ], 0, offsetX, x );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmin = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( min === min && min !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanrangeBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array via a callback function, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - index increment\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} range\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = nanrangeBy( x.length, x, 1, accessor );\n* // returns 18.0\n*/\nfunction nanrangeBy( N, x, strideX, clbk, thisArg ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanrangeBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of a strided array via a callback function and ignoring `NaN` values.\n*\n* @module @stdlib/stats-base-nanrange-by\n*\n* @example\n* var nanrangeBy = require( '@stdlib/stats-base-nanrange-by' );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* var v = nanrangeBy( x.length, x, 1, accessor );\n* // returns 18.0\n*\n* @example\n* var nanrangeBy = require( '@stdlib/stats-base-nanrange-by' );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* var v = nanrangeBy.ndarray( x.length, x, 1, 0, accessor );\n* // returns 18.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EA+BvD,SAASC,EAAYC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAU,CAC5D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAQJ,GALAN,EAAOL,EAAE,KAGTM,EAAMN,EAAE,UAAU,CAAC,EAEdD,IAAM,GAAKE,IAAY,EAE3B,OADAS,EAAIP,EAAK,KAAMC,EAASE,EAAKD,EAAMH,CAAQ,EAAG,EAAGA,EAASG,CAAK,EAC1DK,IAAM,QAAUb,EAAOa,CAAE,EACtB,IAED,EAGR,IADAD,EAAKP,EACCS,EAAI,EAAGA,EAAIZ,IAChBS,EAAML,EAAK,KAAMC,EAASE,EAAKD,EAAMI,CAAG,EAAGE,EAAGF,EAAIJ,CAAK,EAClD,EAAAG,IAAQA,GAAOA,IAAQ,SAFTG,IAKnBF,GAAMR,EAEP,GAAKU,IAAMZ,EACV,MAAO,KAIR,IAFAQ,EAAMC,EACNG,GAAK,EACCA,EAAGA,EAAIZ,EAAGY,IACfF,GAAMR,EACNS,EAAIP,EAAK,KAAMC,EAASE,EAAKD,EAAMI,CAAG,EAAGE,EAAGF,EAAIJ,CAAK,EAChD,EAAAK,IAAM,QAAUb,EAAOa,CAAE,KAGzBA,EAAIF,EACRA,EAAME,EACKA,EAAIH,IACfA,EAAMG,IAGR,OAAOH,EAAMC,CACd,CAKAZ,EAAO,QAAUE,IC1GjB,IAAAc,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAmB,QAAS,qCAAsC,EAClEC,EAAY,IA0BhB,SAASC,EAAYC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAU,CAC5D,IAAIC,EACAC,EACAC,EACA,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,MAAO,KAGR,GADA,EAAIH,EAAkBI,CAAE,EACnB,EAAE,iBACN,OAAOH,EAAWE,EAAG,EAAGE,EAASC,EAASC,EAAMC,CAAQ,EAEzD,GAAKL,IAAM,GAAKE,IAAY,EAE3B,OADAO,EAAIL,EAAK,KAAMC,EAASJ,EAAGE,CAAQ,EAAG,EAAGA,EAASF,CAAE,EAC/CQ,IAAM,QAAUb,EAAOa,CAAE,EACtB,IAED,EAGR,IADAD,EAAKL,EACCO,EAAI,EAAGA,EAAIV,IAChBO,EAAMH,EAAK,KAAMC,EAASJ,EAAGO,CAAG,EAAGE,EAAGF,EAAIP,CAAE,EACvC,EAAAM,IAAQA,GAAOA,IAAQ,SAFTG,IAKnBF,GAAMN,EAEP,GAAKQ,IAAMV,EACV,MAAO,KAIR,IAFAM,EAAMC,EACNG,GAAK,EACCA,EAAGA,EAAIV,EAAGU,IACfF,GAAMN,EACNO,EAAIL,EAAK,KAAMC,EAASJ,EAAGO,CAAG,EAAGE,EAAGF,EAAIP,CAAE,EACrC,EAAAQ,IAAM,QAAUb,EAAOa,CAAE,KAGzBA,EAAIF,EACRA,EAAME,EACKA,EAAIH,IACfA,EAAMG,IAGR,OAAOH,EAAMC,CACd,CAKAZ,EAAO,QAAUI,ICvGjB,IAAAY,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAyBd,SAASC,EAAYC,EAAGC,EAAGC,EAASC,EAAMC,EAAU,CACnD,OAAON,EAASE,EAAGC,EAAGC,EAASL,EAAeG,EAAGE,CAAQ,EAAGC,EAAMC,CAAQ,CAC3E,CAKAR,EAAO,QAAUG,ICHjB,IAAIM,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "isnan", "nanrangeBy", "N", "x", "strideX", "offsetX", "clbk", "thisArg", "xbuf", "get", "max", "min", "ix", "v", "i", "require_ndarray", "__commonJSMin", "exports", "module", "isnan", "arraylike2object", "accessors", "nanrangeBy", "N", "x", "strideX", "offsetX", "clbk", "thisArg", "max", "min", "ix", "v", "i", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "nanrangeBy", "N", "x", "strideX", "clbk", "thisArg", "setReadOnly", "main", "ndarray"]
}
